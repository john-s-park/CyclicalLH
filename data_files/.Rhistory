X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-(((r*X)/(5 + X)) - 0.1*X)*X
return(list(dX)) ## for some reason, you have to return a list
}
RunAlleeGrowth<-function(MaxTime=20,GrowthRate=2,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = AlleeGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunAlleeGrowth()
AlleeGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-(((r*X)/(5 + X)) - 0.1*X)*X
return(list(dX)) ## for some reason, you have to return a list
}
RunAlleeGrowth<-function(MaxTime=20,GrowthRate=2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = AlleeGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunAlleeGrowth()
RunLogisticGrowth()
AlleeGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-(((r*X)/(5 + X)) - 0.1*X)*X
return(list(dX)) ## for some reason, you have to return a list
}
RunAlleeGrowth<-function(MaxTime=10,GrowthRate=2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = AlleeGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunAlleeGrowth()
AlleeGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-(((r*X)/(5 + X)) - 0.1*X)*X
return(list(dX)) ## for some reason, you have to return a list
}
RunAlleeGrowth<-function(MaxTime=10,GrowthRate=2,InitialX=1){
times <- seq(0, MaxTime, by = 1)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = AlleeGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunAlleeGrowth()
AlleeGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-(((r*X)/(5 + X)) - 0.1*X)*X
return(list(dX)) ## for some reason, you have to return a list
}
RunAlleeGrowth<-function(MaxTime=10,GrowthRate=2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = AlleeGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLogisticGrowth()
RunLogisticGrowth<-function(MaxTime=60,GrowthRate=0.1,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LogisticGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLogisticGrowth()
RunAlleeGrowth()
RunAlleeGrowth<-function(MaxTime=10,GrowthRate=2,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = AlleeGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunAlleeGrowth()
AlleeGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-(((r*X)/(5 + X)) - 0.1*X)*X
return(list(dX)) ## for some reason, you have to return a list
}
RunAlleeGrowth<-function(MaxTime=10,GrowthRate=2,InitialX=2){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = AlleeGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunAlleeGrowth()
AlleeGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-(((r*X)/(5 + X)) - 0.1*X)*X
return(list(dX)) ## for some reason, you have to return a list
}
RunAlleeGrowth<-function(MaxTime=10,GrowthRate=2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = AlleeGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunAlleeGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinGrowth<-function(MaxTime=100,GrowthRate=2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinGrowth()
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
RunLevinsGrowth()
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=2,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=2,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.5*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=0.1,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=0.1,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=0.1,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=0.1,InitialX=0.1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=200,GrowthRate=0.1,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=200,GrowthRate=0.2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=50,GrowthRate=0.2,InitialX=1){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=50,GrowthRate=0.2,InitialX=0.5){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=50,GrowthRate=0.2,InitialX=0.2){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
LevinsGrowth<-function(t, state, parameters) {
X <- state[1] ## the first element is the density of X at time t
r <- parameters[1] ## the first parameter is the growth rate
dX<-r*X*(1-X)-0.1*X
return(list(dX)) ## for some reason, you have to return a list
}
RunLevinsGrowth<-function(MaxTime=100,GrowthRate=0.2,InitialX=0.2){
times <- seq(0, MaxTime, by = 0.01)
parameters <- c(r=GrowthRate)
state <- c(X=InitialX)
out <- ode(y = state, times = times, func = LevinsGrowth, parms = parameters)
print(plot(out[,2]~out[,1],type="l",xlab="time",ylab="Density of X"))
return(out)
}
RunLevinsGrowth()
Allee_ineffect <- Deriv(func.3)
ggplot(data = data.frame(x = 0), aes(x = x))+
stat_function(fun = Allee_ineffect)+
geom_abline(intercept = 0, slope = 0, linetype = 2)+
xlim(0,20)+
ylim(-1,1)+
xlab("N(t)")+
ylab("Positive / Negative Density-Dependency")+
ggtitle("Dynamics of Density-Dependency as a function of Pop Size")
library(ggplot2)
install.packages("MVN")
library(MVN)
install.packages("MVN")
n
# NOTE:
# > This code gives the general machinery that is central to all subsequent analyses. It is tuned with some arbitrary parameters and trade-offs between parameters to demonstrate one possible example. These parameters are noted throughout the code.
# > Output of this code produces Figure 2 of the paper.
# > 'all_optimality_curves.R' is the more extensive code that produces a wide range of model variants. (which produces SI Fig. S3)
##############
# packages
library(reshape2)
library(ggplot2)
library(viridis)
# range of life history parameters
mu_seq <- seq(0.01, 0.05, length.out = 100)
d_seq <- seq(0.10, 0.40, length.out = 100)
f_seq <- seq(4.00, 17.00, length.out = 100)
gamma_seq <- seq(0.01, 0.20, length.out = 100)
# range of cycle periodicity (T) across which to eventually create fitness landscapes
t_seq<- seq(0.5,14,length.out = 100)
# juvenile- and adult-specific mortality associated with cyclical disturbance events (modelled after demographic disturbance data from sampled populations)
Sj = 0.59
Sa = 0.94
# M as a function of the four life history parameters from the system of ODE's (continuous juv and adult abundances)
# named 'fulltradeoff' because this particular example will eventually include three-way trade-offs (producing Fig 2, and SI, Fig. S2 "M")
M.fulltradeoff <- function(mu, d, f, gamma){
M <- matrix(c(-(mu+d),
mu,
f,
-gamma),
2,2)
}
# P as a function of: 1) eigenvalues and eigenvector elements of M, 2) T, and 3) Sj & Sa
P.calc <-function(M,t,Sj,Sa){
lambdas <- eigen(M)$values
vecs <- eigen(M)$vectors
P <- matrix(c(Sj*((vecs[2,1]*exp(lambdas[2]*t)*vecs[1,2])-(vecs[2,2]*exp(lambdas[1]*t)*vecs[1,1]))/
(vecs[1,2]*vecs[2,1]-vecs[2,2]*vecs[1,1]), #P[1,1]
Sa*((vecs[2,1]*exp(lambdas[2]*t)*vecs[2,2])-(vecs[2,2]*exp(lambdas[1]*t)*vecs[2,1]))/
(vecs[1,2]*vecs[2,1]-vecs[2,2]*vecs[1,1]), #P[2,1]
Sj*((vecs[1,2]*exp(lambdas[1]*t)*vecs[1,1])-(vecs[1,1]*exp(lambdas[2]*t)*vecs[1,2]))/
(vecs[1,2]*vecs[2,1]-vecs[2,2]*vecs[1,1]), #P[1,2]
Sa*((vecs[1,2]*exp(lambdas[1]*t)*vecs[2,1])-(vecs[1,1]*exp(lambdas[2]*t)*vecs[2,2]))/
(vecs[1,2]*vecs[2,1]-vecs[2,2]*vecs[1,1])  #P[2,2]
), # vecs [x,y] is 'xth' element of 'yth' eigenvector because vectors are stored in columns (opposite order in equation notations)
nrow=2, ncol=2)
}
# produce a fitness landscape matrix by calculating a vertical gradient of maximum eigenvalue of P associated with a gradient of mu per T, and 2) repeating across T
# (as I scan through the gradient of mu, all other life history parameters (d, f, gamma) change according to trade-off assumptions, thus creating a different P for each value of mu)
fulltradeoff_mu_fitness <- matrix(NA, nrow=length(mu_seq), ncol=length(t_seq))
for (i in 1:length(mu_seq)){
M <- M.fulltradeoff(mu_seq[i], d_seq[i], rev(f_seq)[i], rev(gamma_seq)[i]) # as rate of maturity goes up -> juv mortality up; fecundity down; adult mortality down
for (t in 1:length(t_seq)){
P <- P.calc(M,t_seq[t],Sj, Sa)
fulltradeoff_mu_fitness[i,t] = max(Re(eigen(P)$values))
}
}
# restructure landscape matrix in order to plot in heatmap form, normalized by column (per "T")
colnames(fulltradeoff_mu_fitness) <- c(t_seq[1:length(t_seq)])
rownames(fulltradeoff_mu_fitness) <- c(mu_seq[1:length(mu_seq)])
fulltradeoff_mu_fitness_scaled <-  apply(fulltradeoff_mu_fitness, MARGIN=2, FUN = function(x) (x-min(x))/diff(range(x)))#normalize by column
fulltradeoff_mu_melted <- melt(fulltradeoff_mu_fitness_scaled)
# track optimal life history value (maximum fitness) across T
max_id <- function(fit_col){which(fit_col == max(fit_col))}
fulltradeoff_mu_max <- apply(fulltradeoff_mu_fitness[,1:ncol(fulltradeoff_mu_fitness)],2,max_id) #find, for each T, the maximum value of given variable
fulltradeoff_mu_max <- as.data.frame(fulltradeoff_mu_max)
# plot scaled fitness landscape for mu across T
mu_lndsc.p <- ggplot(fulltradeoff_mu_melted, aes(x=Var2,y=Var1))+
geom_tile(aes(fill=value))+
ggtitle(expression(paste("Fitness Landscape of ", mu)))+
scale_fill_viridis("Relative Fitness \n", option="inferno")+
scale_x_continuous(breaks=seq(0,14,2), limits=c(0,14))+
xlab("Disturbance Period (T)")+ #x-axis will stay the same for all plots
ylab(expression(paste(mu)))+ #ylab depends on function used from above (turn on this line, or line below)
geom_line(data=fulltradeoff_mu_max, aes(x=c(t_seq[1:length(t_seq)]), y=c(mu_seq[fulltradeoff_mu_max]), color="Optimal life history"), size=1) + scale_color_manual("",values= ("max"="black"))+
theme(axis.title=element_text(size=16),
axis.text=element_text(size=12),
plot.title=element_text(size=16, face="bold", hjust=0.5),
legend.text=element_text(size=14),
legend.title=element_text(size=15),
axis.line = element_blank())
mu_lndsc.p
# read raw life history data
clutch <- read.csv("2017_clutch_data.csv")
getwd()
setwd("~/My Papers & Projects/Tigriopus/CyclicalLH_github/CyclicalLH/Data Files/")
# read raw life history data
clutch <- read.csv("2017_clutch_data.csv")
clutch$clutch_1_date <- as.Date(clutch$clutch_1_date, "%m/%d/%y")
clutch$julian_1 <- julian(clutch$clutch_1_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$daynight_1 <- as.numeric(as.character(mapvalues(clutch$AMPM_1, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$timing_1 <- as.numeric(clutch$julian_1 + clutch$daynight_1) #numerical value of birth timing
# numerical values for dates when gravid females were seen from sib-mating (in order, up to five)
clutch$maturity_1_date <- as.Date(clutch$inbred_gravid_1_date, "%m/%d/%y")
clutch$maturity_julian_1 <- julian(clutch$maturity_1_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_1 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_1, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_1 <- as.numeric(clutch$maturity_julian_1 + clutch$maturity_daynight_1)
clutch$maturity_2_date <- as.Date(clutch$inbred_gravid_2_date, "%m/%d/%y")
clutch$maturity_julian_2 <- julian(clutch$maturity_2_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_2 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_2, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_2 <- as.numeric(clutch$maturity_julian_2 + clutch$maturity_daynight_2)
clutch$maturity_3_date <- as.Date(clutch$inbred_gravid_3_date, "%m/%d/%y")
clutch$maturity_julian_3 <- julian(clutch$maturity_3_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_3 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_3, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_3 <- as.numeric(clutch$maturity_julian_3 + clutch$maturity_daynight_3)
clutch$maturity_4_date <- as.Date(clutch$inbred_gravid_4_date, "%m/%d/%y")
clutch$maturity_julian_4 <- julian(clutch$maturity_4_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_4 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_4, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_4 <- as.numeric(clutch$maturity_julian_4 + clutch$maturity_daynight_4)
clutch$maturity_5_date <- as.Date(clutch$inbred_gravid_5_date, "%m/%d/%y")
clutch$maturity_julian_5 <- julian(clutch$maturity_5_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_5 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_5, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_5 <- as.numeric(clutch$maturity_julian_5 + clutch$maturity_daynight_5)
# numerical values for time it took each female (up to five) to reach maturity
clutch$age_maturity1 <- as.numeric(clutch$maturity_timing_1 - clutch$timing_1)
clutch$age_maturity2 <- as.numeric(clutch$maturity_timing_2 - clutch$timing_1)
clutch$age_maturity3 <- as.numeric(clutch$maturity_timing_3 - clutch$timing_1)
clutch$age_maturity4 <- as.numeric(clutch$maturity_timing_4 - clutch$timing_1)
clutch$age_maturity5 <- as.numeric(clutch$maturity_timing_5 - clutch$timing_1)
clutch$age_maturity_mean <- rowMeans(clutch[,c("age_maturity1","age_maturity2","age_maturity3","age_maturity4","age_maturity5")], na.rm = TRUE)
library(Rmisc)
clutch$clutch_1_date <- as.Date(clutch$clutch_1_date, "%m/%d/%y")
clutch$julian_1 <- julian(clutch$clutch_1_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$daynight_1 <- as.numeric(as.character(mapvalues(clutch$AMPM_1, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$timing_1 <- as.numeric(clutch$julian_1 + clutch$daynight_1) #numerical value of birth timing
# numerical values for dates when gravid females were seen from sib-mating (in order, up to five)
clutch$maturity_1_date <- as.Date(clutch$inbred_gravid_1_date, "%m/%d/%y")
clutch$maturity_julian_1 <- julian(clutch$maturity_1_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_1 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_1, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_1 <- as.numeric(clutch$maturity_julian_1 + clutch$maturity_daynight_1)
clutch$maturity_2_date <- as.Date(clutch$inbred_gravid_2_date, "%m/%d/%y")
clutch$maturity_julian_2 <- julian(clutch$maturity_2_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_2 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_2, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_2 <- as.numeric(clutch$maturity_julian_2 + clutch$maturity_daynight_2)
clutch$maturity_3_date <- as.Date(clutch$inbred_gravid_3_date, "%m/%d/%y")
clutch$maturity_julian_3 <- julian(clutch$maturity_3_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_3 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_3, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_3 <- as.numeric(clutch$maturity_julian_3 + clutch$maturity_daynight_3)
clutch$maturity_4_date <- as.Date(clutch$inbred_gravid_4_date, "%m/%d/%y")
clutch$maturity_julian_4 <- julian(clutch$maturity_4_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_4 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_4, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_4 <- as.numeric(clutch$maturity_julian_4 + clutch$maturity_daynight_4)
clutch$maturity_5_date <- as.Date(clutch$inbred_gravid_5_date, "%m/%d/%y")
clutch$maturity_julian_5 <- julian(clutch$maturity_5_date) #add column corresponding to julian date of first clutch (origin: 1970 Jan 01)
clutch$maturity_daynight_5 <- as.numeric(as.character(mapvalues(clutch$inb_AMPM_5, c("AM", "PM"), c("0.0","0.5")))) #convert AM/PM into numerical
clutch$maturity_timing_5 <- as.numeric(clutch$maturity_julian_5 + clutch$maturity_daynight_5)
# numerical values for time it took each female (up to five) to reach maturity
clutch$age_maturity1 <- as.numeric(clutch$maturity_timing_1 - clutch$timing_1)
clutch$age_maturity2 <- as.numeric(clutch$maturity_timing_2 - clutch$timing_1)
clutch$age_maturity3 <- as.numeric(clutch$maturity_timing_3 - clutch$timing_1)
clutch$age_maturity4 <- as.numeric(clutch$maturity_timing_4 - clutch$timing_1)
clutch$age_maturity5 <- as.numeric(clutch$maturity_timing_5 - clutch$timing_1)
clutch$age_maturity_mean <- rowMeans(clutch[,c("age_maturity1","age_maturity2","age_maturity3","age_maturity4","age_maturity5")], na.rm = TRUE)
# POPULATION MEANS of mean age at maturity (first five to become mature) per each mother's (N=~12) clutch
agematurity <- as.data.frame(cbind(clutch$`Population..`, clutch$age_maturity_mean))
head(clutch)
head(agematurity)
agematurity
dim(clutch)
agematurity[`Population` == "1181396",]
agematurity[`Population..` == "1181396",]
agematurity[`Population.` == "1181396",]
agematurity[V1 == "1181396",]
agematurity[`V1`` == "1181396",]
agematurity[`V1` == "1181396",]
head(agematurity)
agematurity[agematurity$V1 == "1181396",]
